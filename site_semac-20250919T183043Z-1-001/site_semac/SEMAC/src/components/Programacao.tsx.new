import React, { useState } from "react";
import { InscricaoModal } from "./InscricaoModal";
import "./Programacao.css";

export interface Evento {
  id: number;
  dia: 'Segunda-feira' | 'Ter√ßa-feira' | 'Quarta-feira' | 'Quinta-feira' | 'Sexta-feira';
  horario: string;
  tipo: 'Palestra' | 'Minicurso';
  palestrante?: string;
  titulo: string;
  vagas?: number;
}

const programacao: Evento[] = [
  // Segunda-feira
  { id: 1, dia: 'Segunda-feira', horario: '19:00 - 20:40', tipo: 'Palestra', palestrante: 'Ronaldo', titulo: 'Mercado de Trabalho' },
  { id: 3, dia: 'Segunda-feira', horario: '21:00 - 22:30', tipo: 'Palestra', palestrante: 'Marcio (IFSP)', titulo: 'IA em Ciberseguran√ßa' },
  // Ter√ßa-feira
  { id: 4, dia: 'Ter√ßa-feira', horario: '19:00 - 20:40', tipo: 'Palestra', palestrante: 'Diego (Unesp)', titulo: 'Vis√£o Computacional, Rob√≥tica: desafios entre sensores' },
  { id: 6, dia: 'Ter√ßa-feira', horario: '21:00 - 22:30', tipo: 'Palestra', palestrante: 'Marcus', titulo: 'Cultura de Inova√ß√£o do Google e IA' },
  // Quarta-feira
  { id: 7, dia: 'Quarta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'Paulo Zanluqui', titulo: 'Trilha Frontend', vagas: 30 },
  { id: 8, dia: 'Quarta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Trilha Backend', vagas: 30 },
  { id: 9, dia: 'Quarta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Dev. + Docker', vagas: 30 },
  { id: 10, dia: 'Quarta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Deploy + DNS', vagas: 30 },
  // Quinta-feira
  { id: 11, dia: 'Quinta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'Paulo Zanluqui', titulo: 'Trilha Frontend', vagas: 30 },
  { id: 12, dia: 'Quinta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Trilha Backend', vagas: 30 },
  { id: 13, dia: 'Quinta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Dev. + Docker', vagas: 30 },
  { id: 14, dia: 'Quinta-feira', horario: '19:00 - 22:30', tipo: 'Minicurso', palestrante: 'A definir', titulo: 'Deploy + DNS', vagas: 30 },
  // Sexta-feira
  { id: 15, dia: 'Sexta-feira', horario: '19:00 - 20:40', tipo: 'Palestra', palestrante: 'Yuri', titulo: 'IOT na Tecnologia' },
  { id: 17, dia: 'Sexta-feira', horario: '21:00 - 22:30', tipo: 'Palestra', palestrante: 'Fabio', titulo: 'Evolu√ß√£o da tecnologia dentro de uma operadora' },
];

const EventoCard: React.FC<{ evento: Evento }> = ({ evento }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {
    const card = event.currentTarget;
    const rect = card.getBoundingClientRect();
    const x = ((event.clientX - rect.left) / rect.width) * 100;
    const y = ((event.clientY - rect.top) / rect.height) * 100;
    card.style.setProperty('--x', `${x}%`);
    card.style.setProperty('--y', `${y}%`);
  };

  return (
    <>
      <div className="evento-card" onMouseMove={handleMouseMove}>
        <div className="card-glow"></div>
        <span className="evento-tipo">{evento.tipo}</span>
        <h3 className="evento-titulo">{evento.titulo}</h3>
        {evento.palestrante && (
          <p className="evento-palestrante">{evento.palestrante}</p>
        )}
        <div className="evento-info">
          <div className="evento-horario">üïí {evento.horario}</div>
          {evento.vagas && (
            <div className="evento-vagas">üë• {evento.vagas} vagas</div>
          )}
        </div>
        <button
          className="btn-inscricao"
          onClick={() => setIsModalOpen(true)}
        >
          Fazer Pr√©-inscri√ß√£o
        </button>
      </div>

      <InscricaoModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        eventoId={evento.id}
        eventoTitulo={evento.titulo}
      />
    </>
  );
};

const Programacao: React.FC = () => {
  const eventosPorDia = programacao.reduce((acc: Record<string, Evento[]>, evento) => {
    (acc[evento.dia] = acc[evento.dia] || []).push(evento);
    return acc;
  }, {} as Record<string, Evento[]>);

  const diasOrdenados = [
    'Segunda-feira',
    'Ter√ßa-feira',
    'Quarta-feira',
    'Quinta-feira',
    'Sexta-feira'
  ].filter(dia => eventosPorDia[dia]?.length > 0);

  return (
    <section className="programacao-section">
      <h2 className="section-title">Programa√ß√£o</h2>
      {diasOrdenados.map((dia) => {
        const eventosDoDia = eventosPorDia[dia];
        return (
          <div key={dia} className="dia-section">
            <h3 className="dia-title">{dia}</h3>
            <div className="eventos-grid">
              {eventosDoDia.map((evento) => (
                <EventoCard key={evento.id} evento={evento} />
              ))}
            </div>
          </div>
        );
      })}
    </section>
  );
};

export default Programacao;
